{"version":3,"file":"svgraph.js","sources":["../src/label.ts","../src/svg.ts","../src/svgraph.ts"],"sourcesContent":["export interface Label {\n\tget text(): string\n\tgetPos(max: number): number\n}\n\nexport class NumberLabel implements Label {\n\tconstructor(public value: number) { }\n\n\tget text() { return this.value.toString() }\n\n\tgetPos(max: number) { return this.value / max }\n}\n","const ns = \"http://www.w3.org/2000/svg\"\n\nexport function element(name: string, attrs: { [key: string]: any }, children: SVGElement[] = []): SVGElement {\n\tconst elem = document.createElementNS(ns, name)\n\tfor (const key in attrs) {\n\t\tif (attrs[key] !== undefined) elem.setAttribute(key, attrs[key])\n\t}\n\tfor (const child of children ?? []) elem.appendChild(child)\n\treturn elem\n}\n\ntype stringable = string | number | boolean\n\ntype DefaultAttrs = {\n\tclass?: string\n\ttransform?: string,\n\tfill?: string\n\tstroke?: string\n\t\"stroke-width\"?: string\n}\n\nexport const svg = (attrs: { width: string, height: string, viewBox?: string, preserveAspectRatio?: string, overflow?: string } & DefaultAttrs, ...children: SVGElement[]) =>\n\telement(\"svg\", { ...attrs, xmlns: ns }, children)\n\nexport const g = (attrs: DefaultAttrs = {}, ...children: SVGElement[]) => element(\"g\", attrs, children)\n\nexport const line = (attrs: { from: [stringable, stringable], to: [stringable, stringable] } & DefaultAttrs, ...children: SVGElement[]) =>\n\telement(\"line\", { ...attrs, x1: attrs.from[0], y1: attrs.from[1], x2: attrs.to[0], y2: attrs.to[1], from: undefined, to: undefined }, children)\n\nexport const polyline = (attrs: { points: [number, number][] } & DefaultAttrs, ...children: SVGElement[]) =>\n\telement(\"polyline\", { ...attrs, points: attrs.points.map(([x, y]) => `${x},${y}`).join(\" \") }, children)\n\nexport const rect = (attrs: { x?: string, y?: string, width: string, height: string, rx?: string, ry?: string } & DefaultAttrs, ...children: SVGElement[]) =>\n\telement(\"rect\", attrs, children)\n\nexport const text = (attrs: {x: stringable, y: stringable, dx?: stringable, dy?: stringable, rotate?: number[], lengthAdjust?: string, textLength?: stringable} & DefaultAttrs, ...children: SVGElement[]) =>\n\telement(\"text\", attrs, children)\n","import { Label, NumberLabel } from \"./label\"\nimport { g, line, polyline, rect, svg, text } from \"./svg\"\n\nexport default class SVGraph {\n\telem: SVGElement\n\tdata: { name: string, values: number[] }[]\n\tmaxX: number\n\tmaxY: number\n\txLabels: Label[]\n\tyLabels: Label[]\n\tprivate resizeObserver: ResizeObserver\n\n\taxisSize = 40\n\n\tconstructor({ data }: { data: { [category: string]: number[] } }) {\n\t\tthis.elem = svg({ width: \"100%\", height: \"100%\", overflow: \"visible\" })\n\t\tthis.update(data, false)\n\n\t\tthis.resizeObserver = new ResizeObserver((entries) => {\n\t\t\tthis.draw(entries[0].contentBoxSize[0].inlineSize, entries[0].contentBoxSize[0].blockSize)\n\t\t})\n\t\tthis.resizeObserver.observe(this.elem, { box: \"content-box\" })\n\t}\n\n\tupdate(lines: { [category: string]: number[] }, redraw = true) {\n\t\tthis.data = Object.entries(lines).sort((a, b) => b[1].max() - a[1].max()).map(([name, values]) => ({ name, values }))\n\n\t\tthis.maxX = this.data.map(({ values }) => values.length - 1).max()\n\t\tthis.maxY = this.data[0].values.max()\n\n\t\tthis.xLabels = new Set(this.data.flatMap(({ values }) => values.keys().toArray())).values().toArray().sort().map((i) => new NumberLabel(i))\n\t\tthis.yLabels = [0, 10, 30].map(i => new NumberLabel(i))\n\n\t\tif (redraw) this.draw(this.elem.clientWidth, this.elem.clientHeight)\n\t}\n\n\tdraw(width: number, height: number) {\n\t\tthis.elem.innerHTML = \"\"\n\n\t\tthis.elem.appendChild(rect({ width: \"100%\", height: \"100%\", fill: \"#EEE\" }))\n\t\tthis.elem.appendChild(this.lines(width - this.axisSize, height - this.axisSize))\n\t\tthis.elem.appendChild(this.axes(width, height))\n\t}\n\n\tprivate axes(width: number, height: number): SVGElement {\n\t\treturn g({ class: \"axes\" },\n\t\t\tthis.xAxis(this.axisSize, height - this.axisSize, width - this.axisSize, this.axisSize),\n\t\t\tthis.yAxis(0, 0, this.axisSize, height - this.axisSize)\n\t\t)\n\t}\n\n\tprivate xAxis = (x: number, y: number, width: number, height: number): SVGElement =>\n\t\tg({ class: \"xaxis\" },\n\t\t\tline({ from: [x, y], to: [x + width, y], stroke: \"black\" }),\n\t\t\t...this.xLabels.map(step => text({\n\t\t\t\tx: x + step.getPos(this.maxX) * width,\n\t\t\t\ty: y + 20,\n\t\t\t\t\"text-anchor\": \"middle\"\n\t\t\t}, new Text(step.text)))\n\t\t)\n\n\tprivate yAxis = (x: number, y: number, width: number, height: number): SVGElement =>\n\t\tg({ class: \"yaxis\" },\n\t\t\tline({ from: [x + width, y], to: [x + width, y + height], stroke: \"black\" }),\n\t\t\t...this.yLabels.map(step => text({\n\t\t\t\tx: x + width - 10,\n\t\t\t\ty: y + height - step.getPos(this.maxY) * height,\n\t\t\t\t\"text-anchor\": \"end\"\n\t\t\t}, new Text(step.text)))\n\t\t)\n\n\tprivate lines(width: number, height: number): SVGElement {\n\t\tconst elem = g({ class: \"lines\", transform: `translate(${this.axisSize}, 0)`, \"stroke-width\": \"2\" })\n\t\tfor (const { name, values } of this.data) {\n\t\t\tconst points = values.map((y, x) => [x * width / this.maxX, (1 - y / this.maxY) * height] as [number, number])\n\t\t\telem.appendChild(polyline({ points, fill: \"none\", stroke: \"black\" }))\n\t\t}\n\t\treturn elem\n\t}\n}\n\ndeclare global {\n\tinterface Array<T> {\n\t\tmax(): number\n\t\tmin(): number\n\t}\n}\n\nArray.prototype.max = function () { return this.reduce((a, b) => Math.max(a, b), 0) }\nArray.prototype.min = function () { return this.reduce((a, b) => Math.min(a, b), 0) }\n"],"names":["NumberLabel","value","constructor","this","text","toString","getPos","max","ns","element","name","attrs","children","elem","document","createElementNS","key","undefined","setAttribute","child","appendChild","g","line","x1","from","y1","x2","to","y2","polyline","points","map","x","y","join","SVGraph","data","maxX","maxY","xLabels","yLabels","resizeObserver","axisSize","xmlns","svg","width","height","overflow","update","ResizeObserver","entries","draw","contentBoxSize","inlineSize","blockSize","observe","box","lines","redraw","Object","sort","a","b","values","length","Set","flatMap","keys","toArray","i","clientWidth","clientHeight","innerHTML","rect","fill","axes","class","xAxis","yAxis","stroke","step","Text","transform","Array","prototype","reduce","Math","min"],"mappings":"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"}